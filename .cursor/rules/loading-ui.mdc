---
description: 
globs: 
alwaysApply: true
---
# Rule: Always Use Loading States with Shadcn Skeleton for Data Fetching in Next.js

**Purpose:**  
To enhance user experience by ensuring fast perceived loading times, this rule mandates the use of streaming data techniques and the Shadcn UI Skeleton component (`@/components/ui/skeleton.tsx`) as a loading placeholder for all data-fetching operations. This applies to both route-level and component-level data fetching in the application, leveraging Next.js's streaming capabilities for optimal performance.

---

## 1. Route-Level Loading States with `loading.js`
- **Description:** For each route that fetches data, implement a loading state using a `loading.js` file in the same directory. This leverages Next.js's built-in streaming to display a Skeleton-based UI immediately while the server fetches the full page data.
- **Steps:**
  - Create a `loading.js` file in the route directory (e.g., `app/products/loading.js`).
  - Use the Shadcn Skeleton component to replicate the layout of the actual page content.
- **Example:**
  ```tsx
  // app/products/loading.js
  import { Skeleton } from '@/components/ui/skeleton';

  export default function Loading() {
    return (
      <div className="space-y-4">
        {/* Title placeholder */}
        <Skeleton className="h-8 w-1/3" />
        {/* Product grid placeholders */}
        <div className="grid grid-cols-3 gap-4">
          {Array.from({ length: 6 }).map((_, i) => (
            <Skeleton key={i} className="h-32 w-full" />
          ))}
        </div>
      </div>
    );
  }
  ```
  **Outcome:** When navigating to the route, the Skeleton UI renders instantly, and the actual content streams in as data becomes available, ensuring a smooth transition.

## 2. Component-Level Loading States with Suspense (Server Components)
**Description:**  
For server components that fetch data, use React Suspense to stream specific parts of the page while displaying a Skeleton fallback.

**Steps:**
- Wrap the data-fetching component in a `<Suspense>` boundary.
- Provide a fallback using the Shadcn Skeleton component that matches the expected content layout.

**Example:**
```tsx
// app/products/page.tsx
import { Suspense } from 'react';
import { fetchProducts } from '@/lib/supabase';
import ProductList from '@/components/ProductList';
import { Skeleton } from '@/components/ui/skeleton';

export default async function ProductsPage() {
  const productsPromise = fetchProducts();
  return (
    <div>
      {/* Renders immediately */}
      <h1>Products</h1>
      {/* Streams in when data is ready */}
      <Suspense fallback={<Skeleton className="h-32 w-full" />}>
        <ProductList productsPromise={productsPromise} />
      </Suspense>
    </div>
  );
}

// components/ProductList.tsx
export default async function ProductList({ productsPromise }) {
  const products = await productsPromise;
  return (
    <div className="grid grid-cols-3 gap-4">
      {products.map(product => (
        <div key={product.id}>{product.name}</div>
      ))}
    </div>
  );
}
```
**Outcome:** Static parts of the page (e.g., headers) render immediately, while data-dependent sections show a Skeleton until the data resolves and streams in.

## 3. Component-Level Loading States in Client Components
**Description:**  
For client-side data fetching (e.g., using useSWR or fetch), manage the loading state within the component using the Shadcn Skeleton.

**Steps:**
- Check the data fetching status and render the Skeleton until data is available.

**Example:**
```tsx
// components/UserDashboard.tsx
'use client';
import useSWR from 'swr';
import { Skeleton } from '@/components/ui/skeleton';

const fetcher = url => fetch(url).then(res => res.json());

export default function UserDashboard() {
  const { data, error } = useSWR('/api/user-data', fetcher);
  if (error) return <div>Error loading data</div>;
  if (!data) return <Skeleton className="h-4 w-full" />;
  return <div>Welcome, {data.userName}</div>;
}
```

**Outcome:**
The Skeleton appears during client-side data fetching, ensuring a consistent and smooth loading experience until the actual data is available.

